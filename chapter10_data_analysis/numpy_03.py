# 3. 배열의 인덱싱과 슬라이싱
import numpy as np

# 인덱싱 Indexing : 배열의 위치나 조건을 지정해 배열의 원소를 선택
# 슬라이싱 Slicing : 범위를 지정해 배열의 원소를 선택.

# 1) 배열의 인덱싱.
# 1차원 배열에서 특정 위치의 원소를 선택하려면 원소의 위치를 지정.
# 배열명[위치]
# 배열 원소의 위치는 0부터 시작.

a1 = np.array([0, 10, 20, 30, 40, 50])

print(a1[0])
print(a1[4])

# 배열을 변경
a1[5] = 70
print(a1)  # [ 0 10 20 30 40 70]

# 1차원 배열에서 여러 개의 원소를 선택.
# 배열명[ 위치1, 위치2, ... , 위치n]

print(a1[[1, 3, 4]])  # [10 30 40]

# 2차원 배열에서 특정 위치의 원소를 선택하려면 행과 열의 위치를 지정.
# 배열명[행_위치, 열_위치]
print()
# 10부터 99까지 10씩 증가하는 1차원 배열을 생성한 후에 3행 3열의 2차원 배열로 모양을 바꿈.
a2 = np.arange(10, 100, 10).reshape(3, 3)
# np.arange(10, 100, 10) 으로 1차원 배열을 생성하고  reshape(3, 3) 으로 2차원 배열로 만들어라 3행 3열로 변경하라

print(a2)
# [[10 20 30]
#  [40 50 60]
#  [70 80 90]]

# exam
# 행위치가 0이고, 열 위치가 2인 원소를 반환하라.
print(a2[0, 2])  # 30 <-- Numpy에서 주로 쓰는 방법
print(a2[0][2])  # 30 <-- 기존의 방식으로도 가능하다

# 2차원 배열의 행과 열의 위치를 지정해서 원소를 선택한 후 값을 변경할 수 잇음.
a2[2, 2] = 95
print(a2)
# [[10 20 30]
#  [40 50 60]
#  [70 80 95]]
print()

# 2차원 배열의 여러 원소를 선택하기 위해서 아래와 같이 지정.
# 배열명[[행_위치1, 행_위치2, ... , 행_위치n], [열_위치1, 열_위치2, ... , 열_위치n]]

print(a2[[0, 2], [0, 1]])  # [10 80]

